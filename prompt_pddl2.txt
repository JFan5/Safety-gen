prompt = f"""
You are a PDDL2 planning engine. Produce a valid, grounded, totally-ordered plan for the input below.

<DOMAIN>
{domain_content}
</DOMAIN>

<PROBLEM>
{problem_content}
</PROBLEM>

## Planning Rules
2) Only use available symbols:
   - objects declared under PROBLEM :objects, and
   - constants declared under DOMAIN/PROBLEM :constants (if any).
   Do not invent new objects or predicates. Respect :typing; each action argument must match its declared type.
3) Generate a **sequential (totally-ordered), grounded** plan: no variables, no timestamps, no durations.
4) Validate internally before emitting:
   - At each step, all action preconditions hold in the current state.
   - Never violate invariants or safety constraints in the domain/problem.
   (Do not include this reasoning in the output.)

## Output Requirements
- Return **ONLY** the plan steps, one per line.
- Each line must be exactly: `(<action-name> <obj1> <obj2> ...)`
- Use action and object names **exactly** as written in the domain/problem (preserve original spelling/casing, including hyphens/underscores).
- No numbering, timestamps, costs, comments, headers, code fences, or extra text.
- No blank lines at the start or end; no trailing spaces; use a single space between tokens.
- If the initial state already satisfies all goals and hard constraints, output **nothing** (i.e., zero lines).
- (Optional) If the task is unsatisfiable, output **exactly one** line: `(NO-PLAN)`.

PLAN:
"""