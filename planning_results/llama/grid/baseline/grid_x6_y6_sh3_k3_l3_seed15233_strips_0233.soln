<domain>
  (:requirements :strips :constraints)
  (:predicates (conn?x?y)
             (key-shape?k?s)
             (lock-shape?x?s)
             (at?r?x )
	     (at-robot?x)
             (place?p)
             (key?k)
             (shape?s)
             (locked?x)
             (holding?k)
             (open?x)
             (arm-empty ))
  (:action unlock
    :parameters (?curpos?lockpos?key?shape)
    :precondition (and (place?curpos) (place?lockpos) (key?key) (shape?shape)
          (conn?curpos?lockpos) (key-shape?key?shape)
                   (lock-shape?lockpos?shape) (at-robot?curpos) 
                   (locked?lockpos) (holding?key))
    :effect (and  (open?lockpos) (not (locked?lockpos))))
  (:action move
    :parameters (?curpos?nextpos)
    :precondition (and (place?curpos) (place?nextpos)
               (at-robot?curpos) (conn?curpos?nextpos) (open?nextpos))
    :effect (and (at-robot?nextpos) (not (at-robot?curpos))))
  (:action pickup
    :parameters (?curpos?key)
    :precondition (and (place?curpos) (key?key) 
                  (at-robot?curpos) (at?key?curpos) (arm-empty ))
    :effect (and (holding?key)
   (not (at?key?curpos)) (not (arm-empty ))))
  (:action pickup-and-loose
    :parameters (?curpos?newkey?oldkey)
    :precondition (and (place?curpos) (key?newkey) (key?oldkey)
                  (at-robot?curpos) (holding?oldkey) (at?newkey?curpos))
    :effect (and (holding?newkey) (at?oldkey?curpos)
        (not (holding?oldkey)) (not (at?newkey?curpos))))
  (:action putdown
    :parameters (?curpos?key)
    :precondition (and (place?curpos) (key?key) 
                  (at-robot?curpos) (holding?key))
    :effect (and (arm-empty ) (at?key?curpos) (not (holding?key))))
</domain>

<problem>
  (:domain grid)
  (:objects
    pos0-0 pos0-1 pos0-2 pos0-3 pos0-4 pos0-5 pos1-0 pos1-1 pos1-2 pos1-3 pos1-4 pos1-5 pos2-0 pos2-1 pos2-2 pos2-3 pos2-4 pos2-5 pos3-0 pos3-1 pos3-2 pos3-3 pos3-4 pos3-5 pos4-0 pos4-1 pos4-2 pos4-3 pos4-4 pos4-5 pos5-0 pos5-1 pos5-2 pos5-3 pos5-4 pos5-5
    shape0 shape1 shape2
    key0 key1 key2
  )
  (:init
     (arm-empty)

     (place pos0-0)
     (place pos0-1)
     (place pos0-2)
     (place pos0-3)
     (place pos0-4)
     (place pos0-5)
     (place pos1-0)
     (place pos1-1)
     (place pos1-2)
     (place pos1-3)
     (place pos1-4)
     (place pos1-5)
     (place pos2-0)
     (place pos2-1)
     (place pos2-2)
     (place pos2-3)
     (place pos2-4)
     (place pos2-5)
     (place pos3-0)
     (place pos3-1)
     (place pos3-2)
     (place pos3-3)
     (place pos3-4)
     (place pos3-5)
     (place pos4-0)
     (place pos4-1)
     (place pos4-2)
     (place pos4-3)
     (place pos4-4)
     (place pos4-5)
     (place pos5-0)
     (place pos5-1)
     (place pos5-2)
     (place pos5-3)
     (place pos5-4)
     (place pos5-5)
     (key-shape  key0 shape0)
     (key-shape  key1 shape1)
     (key-shape  key2 shape2)
     (at key0 pos3-5)
     (at key1 pos1-1)
     (at key2 pos0-0)
     (at-robot pos0-0)
  )
  (:goal (and
     (at key0 pos3-5)
     (at key2 pos2-5)
  ))
  (:constraints
    (always (not (at-robot pos4-5)))
  )
)
</problem>

(no plan)