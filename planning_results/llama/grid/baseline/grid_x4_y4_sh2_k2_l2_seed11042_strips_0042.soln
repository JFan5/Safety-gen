You are a domain-agnostic planning engine. Produce a valid, grounded, totally-ordered plan for the input below.

<DOMAIN>
(define (domain grid)
(:requirements :strips :constraints)
(:predicates (conn?x?y)
             (key-shape?k?s)
             (lock-shape?x?s)
             (at?r?x )
	     (at-robot?x)
             (place?p)
             (key?k)
             (shape?s)
             (locked?x)
             (holding?k)
             (open?x)
             (arm-empty ))




(:action unlock
:parameters (?curpos?lockpos?key?shape)
:precondition (and (place?curpos) (place?lockpos) (key?key) (shape?shape)
          (conn?curpos?lockpos) (key-shape?key?shape)
                   (lock-shape?lockpos?shape) (at-robot?curpos) 
                   (locked?lockpos) (holding?key))
:effect (and  (open?lockpos) (not (locked?lockpos))))
)


(:action move
:parameters (?curpos?nextpos)
:precondition (and (place?curpos) (place?nextpos)
               (at-robot?curpos) (conn?curpos?nextpos) (open?nextpos))
:effect (and (at-robot?nextpos) (not (at-robot?curpos))))
)


(:action pickup
:parameters (?curpos?key)
:precondition (and (place?curpos) (key?key) 
                  (at-robot?curpos) (at?key?curpos) (arm-empty ))
:effect (and (holding?key)
   (not (at?key?curpos)) (not (arm-empty ))))
)


(:action pickup-and-loose
:parameters (?curpos?newkey?oldkey)
:precondition (and (place?curpos) (key?newkey) (key?oldkey)
                  (at-robot?curpos) (holding?oldkey) (at?newkey?curpos))
:effect (and (holding?newkey) (at?oldkey?curpos)
        (not (holding?oldkey)) (not (at?newkey?curpos))))
)


(:action putdown
:parameters (?curpos?key)
:precondition (and (place?curpos) (key?key) 
                  (at-robot?curpos) (holding?key))
:effect (and (arm-empty ) (at?key?curpos) (not (holding?key))))
)


 






 



</DOMAIN>

<PROBLEM>
(define (problem grid-4-4-2-2-2)
    (:domain grid)
    (:objects
    pos0-0 pos0-1 pos0-2 pos0-3 pos1-0 pos1-1 pos1-2 pos1-3 pos2-0 pos2-1 pos2-2 pos2-3 pos3-0 pos3-1 pos3-2 pos3-3
    shape0 shape1
    key0 key1
    )

    (:init
       (arm-empty)

       (place pos0-0)
       (place pos0-1)
       (place pos0-2)
       (place pos0-3)
       (place pos1-0)
       (place pos1-1)
       (place pos1-2)
       (place pos1-3)
       (place pos2-0)
       (place pos2-1)
       (place pos2-2)
       (place pos2-3)
       (place pos3-0)
       (place pos3-1)
       (place pos3-2)
       (place pos3-3)
       (shape shape0)
       (shape shape1)
       (key key0)
       (key key1)

       (conn pos0-0 pos1-0)
       (conn pos0-0 pos0-1)
       (conn pos0-1 pos1-1)
       (conn pos0-1 pos0-2)
       (conn pos0-1 pos0-0)
       (conn pos0-2 pos1-2)
       (conn pos0-2 pos0-3)
       (conn pos0-2 pos0-1)
       (conn pos0-3 pos1-3)
       (conn pos0-3 pos0-2)
       (conn pos1-0 pos2-0)
       (conn pos1-0 pos1-1)
       (conn pos1-0 pos0-0)
       (conn pos1-1 pos2-1)
       (conn pos1-1 pos1-2)
       (conn pos1-1 pos0-1)
       (conn pos1-1 pos1-0)
       (conn pos1-2 pos2-2)
       (conn pos1-2 pos1-3)
       (conn pos1-2 pos0-2)
       (conn pos1-3 pos2-3)
       (conn pos1-3 pos0-3)
       (conn pos1-3 pos1-2)
       (conn pos2-0 pos3-0)
       (conn pos2-0 pos2-1)
       (conn pos2-0 pos1-0)
       (conn pos2-1 pos3-1)
       (conn pos2-1 pos2-2)
       (conn pos2-1 pos1-1)
       (conn pos2-1 pos2-0)
       (conn pos2-2 pos3-2)
       (conn pos2-2 pos2-3)
       (conn pos2-2 pos1-2)
       (conn pos2-3 pos3-3)
       (conn pos2-3 pos1-3)
       (conn pos2-3 pos2-2)
       (locked pos3-3)
       (locked pos3-0)
       (lock-shape  pos3-3 shape0)
       (lock-shape  pos3-0 shape1)
       (open pos0-0)
       (open pos0-1)
       (open pos0-2)
       (open pos0-3)
       (open pos1-0)
       (open pos1-1)
       (open pos1-2)
       (open pos1-3)
       (open pos2-0)
       (open pos2-1)
       (open pos2-2)
       (open pos2-3)
       (open pos3-1)
       (open pos3-2)

       (key-shape  key0 shape0)
       (key-shape  key1 shape1)
       (at key0 pos1-3)
       (at key1 pos0-2)
       (at-robot pos3-1)
    )

    (:goal (and
       (at key1 pos1-3)
    ))
(:constraints
  (always (not (at-robot pos2-1)))
)
)
</PROBLEM>

## Planning Rules
1) Only use available symbols:
   - objects declared under PROBLEM :objects, and
   - constants declared under DOMAIN/PROBLEM :constants (if any).
   Do not invent new objects or predicates. Respect :typing; each action argument must match its declared type.

2) Constraints:
   - If the PROBLEM includes PDDL3/PDDL 3.0 constraints (e.g., under :constraints or equivalent), EVERY such constraint MUST be satisfied.
   - If no constraints are provided in the PROBLEM, solve as a goal-directed PDDL2 task.

3) Plan form:
   - Produce a **sequential (totally-ordered), grounded** plan: no variables, no timestamps, no durations.

4) Internal validation before emitting (do not include reasoning in the output):
   - At each step, all action preconditions hold in the current state.
   - Never violate invariants or safety constraints implied by DOMAIN/PROBLEM.
   - If constraints exist in PROBLEM, ensure the plan satisfies all of them.

## Output Requirements
- Return **ONLY** the plan steps, one per line.
- Each line must be exactly: `(<action-name> <obj1> <obj2>...)`
- Use action and object names **exactly** as written in the domain/problem (preserve original spelling/casing, including hyphens/underscores).
- No numbering, timestamps, costs, comments, headers, code fences, or extra text.
- If the initial state already satisfies all goals and all constraints (if any), output **nothing** (i.e., zero lines).
- If the task is unsatisfiable given the DOMAIN and PROBLEM (including any constraints), output **exactly one** line: `(NO-PLAN)`

## Examples
Bad:
- Plan:
- Here is the plan:
- (move a b)  (two actions on one line)
- (move a) extra

Good:
(move a b)
(pick a c)
(drop a d)

Now produce the final output. Remember: only lines matching the regex. No extra text of any kind.
```python
NO-PLAN
```