You are a domain-agnostic planning engine. Produce a valid, grounded, totally-ordered plan for the input below.

<DOMAIN>
(define (domain grid)
(:requirements :strips :constraints)
(:predicates (conn?x?y)
             (key-shape?k?s)
             (lock-shape?x?s)
             (at?r?x )
	     (at-robot?x)
             (place?p)
             (key?k)
             (shape?s)
             (locked?x)
             (holding?k)
             (open?x)
             (arm-empty ))



(:action unlock
:parameters (?curpos?lockpos?key?shape)
:precondition (and (place?curpos) (place?lockpos) (key?key) (shape?shape)
          (conn?curpos?lockpos) (key-shape?key?shape)
                   (lock-shape?lockpos?shape) (at-robot?curpos) 
                   (locked?lockpos) (holding?key))
:effect (and  (open?lockpos) (not (locked?lockpos))))


(:action move
:parameters (?curpos?nextpos)
:precondition (and (place?curpos) (place?nextpos)
               (at-robot?curpos) (conn?curpos?nextpos) (open?nextpos))
:effect (and (at-robot?nextpos) (not (at-robot?curpos))))

(:action pickup
:parameters (?curpos?key)
:precondition (and (place?curpos) (key?key) 
                  (at-robot?curpos) (at?key?curpos) (arm-empty ))
:effect (and (holding?key)
   (not (at?key?curpos)) (not (arm-empty ))))


(:action pickup-and-loose
:parameters (?curpos?newkey?oldkey)
:precondition (and (place?curpos) (key?newkey) (key?oldkey)
                  (at-robot?curpos) (holding?oldkey) (at?newkey?curpos))
:effect (and (holding?newkey) (at?oldkey?curpos)
        (not (holding?oldkey)) (not (at?newkey?curpos))))

(:action putdown
:parameters (?curpos?key)
:precondition (and (place?curpos) (key?key) 
                  (at-robot?curpos) (holding?key))
:effect (and (arm-empty ) (at?key?curpos) (not (holding?key)))))


	

</DOMAIN>

<PROBLEM>
(define (problem grid-4-4-2-3-3)
    (:domain grid)
    (:objects
    pos0-0 pos0-1 pos0-2 pos0-3 pos1-0 pos1-1 pos1-2 pos1-3 pos2-0 pos2-1 pos2-2 pos2-3 pos3-0 pos3-1 pos3-2 pos3-3
    shape0 shape1
    key0 key1 key2
    )

    (:init
       (arm-empty)

       (place pos0-0)
       (place pos0-1)
       (place pos0-2)
       (place pos0-3)
       (place pos1-0)
       (place pos1-1)
       (place pos1-2)
       (place pos1-3)
       (place pos2-0)
       (place pos2-1)
       (place pos2-2)
       (place pos2-3)
       (place pos3-0)
       (place pos3-1)
       (place pos3-2)
       (place pos3-3)
       (shape shape0)
       (shape shape1)
       (key key0)
       (key key1)
       (key key2)

       (conn pos0-0 pos1-0)
       (conn pos0-0 pos0-1)
       (conn pos0-1 pos1-1)
       (conn pos0-1 pos0-2)
       (conn pos0-1 pos0-0)
       (conn pos0-2 pos1-2)
       (conn pos0-2 pos0-3)
       (conn pos0-2 pos0-1)
       (conn pos0-3 pos1-3)
       (conn pos0-3 pos0-2)
       (conn pos1-0 pos2-0)
       (conn pos1-0 pos1-1)
       (conn pos1-0 pos0-0)
       (conn pos1-1 pos2-1)
       (conn pos1-1 pos1-2)
       (conn pos1-1 pos0-1)
       (conn pos1-1 pos1-0)
       (conn pos1-2 pos2-2)
       (conn pos1-2 pos1-3)
       (conn pos1-2 pos0-2)
       (conn pos1-2 pos1-1)
       (conn pos1-3 pos2-3)
       (conn pos1-3 pos0-3)
       (conn pos1-3 pos1-2)
       (conn pos2-0 pos3-0)
       (conn pos2-0 pos2-1)
       (conn pos2-0 pos1-0)
       (conn pos2-1 pos3-1)
       (conn pos2-1 pos2-2)
       (conn pos2-1 pos1-1)
       (conn pos2-1 pos2-0)
       (conn pos2-2 pos3-2)
       (conn pos2-2 pos2-3)
       (conn pos2-2 pos1-2)
       (conn pos2-2 pos2-1)
       (conn pos2-3 pos3-3)
       (conn pos2-3 pos1-3)
       (conn pos2-3 pos2-2)
       (conn pos3-0 pos3-1)
       (conn pos3-0 pos2-0)
       (conn pos3-1 pos3-2)
       (conn pos3-1 pos2-1)
       (conn pos3-1 pos3-0)
       (conn pos3-2 pos3-3)
       (conn pos3-2 pos2-2)
       (conn pos3-2 pos3-1)
       (conn pos3-3 pos2-3)
       (conn pos3-3 pos3-2)
       (locked pos0-3)
       (locked pos3-1)
       (locked pos3-3)
       (lock-shape  pos0-3 shape0)
       (lock-shape  pos3-1 shape1)
       (lock-shape  pos3-3 shape1)
       (open pos0-0)
       (open pos0-1)
       (open pos0-2)
       (open pos1-0)
       (open pos1-1)
       (open pos1-2)
       (open pos1-3)
       (open pos2-0)
       (open pos2-1)
       (open pos2-2)
       (open pos2-3)
       (open pos3-0)
       (open pos3-2)

       (key-shape  key0 shape0)
       (key-shape  key1 shape1)
       (key-shape  key2 shape0)
       (at key0 pos3-1)
       (at key1 pos0-0)
       (at key2 pos3-0)
       (at-robot pos3-0)
    )

    (:goal (and
       (at key1 pos2-3)
    ))
(:constraints
  (always (not (at-robot pos1-2)))
)
)
</PROBLEM>

Now produce the final output. Remember: only lines matching the regex. No extra text of any kind.

```output
(no-plan)
```