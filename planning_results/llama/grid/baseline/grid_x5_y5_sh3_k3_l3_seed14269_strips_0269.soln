Based on the provided prompt, I will generate a plan for the given problem.

First, I need to parse the problem and domain. Here is the parsed problem:

```
(define (problem grid-5-5-3-3-3)
  (:domain grid)
  (:objects
    pos0-0 pos0-1 pos0-2 pos0-3 pos0-4 pos1-0 pos1-1 pos1-2 pos1-3 pos1-4 pos2-0 pos2-1 pos2-2 pos2-3 pos2-4 pos3-0 pos3-1 pos3-2 pos3-3 pos3-4 pos4-0 pos4-1 pos4-2 pos4-3 pos4-4
    shape0 shape1 shape2
    key0 key1 key2
  )
  (:init
    (arm-empty)
    (place pos0-0)
    (place pos0-1)
    (place pos0-2)
    (place pos0-3)
    (place pos0-4)
    (place pos1-0)
    (place pos1-1)
    (place pos1-2)
    (place pos1-3)
    (place pos1-4)
    (place pos2-0)
    (place pos2-1)
    (place pos2-2)
    (place pos2-3)
    (place pos2-4)
    (place pos3-0)
    (place pos3-1)
    (place pos3-2)
    (place pos3-3)
    (place pos3-4)
    (place pos4-0)
    (place pos4-1)
    (place pos4-2)
    (place pos4-3)
    (place pos4-4)
    (lock-shape  pos2-4 shape0)
    (lock-shape  pos2-0 shape1)
    (lock-shape  pos3-1 shape2)
    (open pos0-0)
    (open pos0-1)
    (open pos0-2)
    (open pos0-3)
    (open pos0-4)
    (open pos1-0)
    (open pos1-1)
    (open pos1-2)
    (open pos1-3)
    (open pos1-4)
    (open pos2-1)
    (open pos2-2)
    (open pos2-3)
    (open pos3-0)
    (open pos3-2)
    (open pos3-3)
    (open pos3-4)
    (open pos4-0)
    (open pos4-1)
    (open pos4-2)
    (open pos4-3)
    (open pos4-4)
    (key-shape  key0 shape0)
    (key-shape  key1 shape1)
    (key-shape  key2 shape2)
    (at key0 pos3-0)
    (at key1 pos0-2)
  )
  (:goal (and
     (at key0 pos3-0)
     (at key1 pos0-2)
  ))
  (:constraints
    (always (not (at-robot pos1-1)))
  )
)
```

Now, I need to generate a plan to satisfy the goal. Since the goal is to move the key0 to pos3-0 and the key1 to pos0-2, I will use the following actions:

1. (move key0 pos3-0)
2. (move key1 pos0-2)

Here is the final output:

```
(move key0 pos3-0)
(move key1 pos0-2)
```