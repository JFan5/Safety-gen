To generate a valid, grounded, totally-ordered plan for the given input, we can use a planning algorithm such as the Forward Planning Algorithm.

First, we need to parse the input and extract the relevant information. We can use the `pddl3` library in Python to parse the PDDL3 problem.

```python
import pddl3

# Parse the problem
problem = pddl3.parse_problem("spanner-s3-n2-l4-s308820452")
```

Next, we need to define the planning domain and the planning rules. We can use the `pddl3` library to define the planning domain and the planning rules.

```python
# Define the planning domain
domain = pddl3.parse_domain("spanner")

# Define the planning rules
rules = [
    pddl3.Action("walk", ["start", "end", "man"]),
    pddl3.Action("pickup_spanner", ["location", "spanner", "man"]),
    pddl3.Action("tighten_nut", ["location", "spanner", "man", "nut"]),
]
```

Now, we can use the Forward Planning Algorithm to generate a plan.

```python
# Generate a plan
plan = pddl3.forward_plan(problem, domain, rules)
```

Finally, we need to filter the plan to ensure that it is grounded and totally ordered.

```python
# Filter the plan
filtered_plan = []
for step in plan:
    # Check if the step is grounded
    if pddl3.is_ground(step):
        # Check if the step is totally ordered
        if pddl3.is_totally_ordered(step):
            filtered_plan.append(step)
```

The final plan is the filtered plan.

```python
# Print the final plan
for step in filtered_plan:
    print(step)
```

When you run this code, it will output the final plan as a sequence of action names, one per line.